// Generated by CoffeeScript 1.3.1
var config, die, fs, get_new_emails, helpers, imap, invoke, mailparser, model, mongo_session, mongoose, server, tmp_dir, underscore, upload_photo, _;

_ = underscore = require("underscore");

_.str = underscore.str = require("underscore.string");

invoke = require("invoke");

imap = require("imap").ImapConnection;

mailparser = require("mailparser").MailParser;

fs = require("fs");

config = require("../config.json");

helpers = require("../build/lib/helpers");

mongo_session = require('connect-mongo');

mongoose = require('mongoose');

mongoose.connect(config.mongodb);

model = {
  user: require("../build/models/user"),
  photo: require("../build/models/photo")
};

server = new imap({
  username: config.mailer.username,
  password: config.mailer.password,
  host: config.mailer.imap.host,
  port: config.mailer.imap.port,
  secure: config.mailer.imap.secure
});

die = function(err) {
  console.error('dead server');
  return process.exit(1);
};

server.connect(function(err) {
  if (err) {
    return die(err);
  }
  return server.openBox('INBOX', false, function(err, box) {
    if (err) {
      return die(err);
    }
    return get_new_emails();
  });
});

get_new_emails = function() {
  return server.search(['UNSEEN', ['SINCE', 'January 1, 2012']], function(err, results) {
    var fetch, options;
    if (err) {
      return die(err);
    }
    options = {
      markSeen: false,
      request: {
        body: 'full',
        headers: false
      }
    };
    fetch = server.fetch(results, options);
    fetch.on('message', function(msg) {
      var parser;
      parser = new mailparser;
      parser.on('end', function(data) {
        data.id = msg.seqno;
        if (data.attachments.length) {
          return upload_photo(data);
        }
      });
      msg.on('data', function(data) {
        return parser.write(data.toString());
      });
      return msg.on('end', function() {
        console.log('Finished message:');
        return parser.end();
      });
    });
    return fetch.on('end', function() {
      console.log('Done fetching all messages!');
      return setTimeout(get_new_emails, 10 * 1000);
    });
  });
};

tmp_dir = __dirname + "/../tmp/";

upload_photo = function(data) {
  var attachment, description, email, file_ext, file_path, name, uid;
  uid = _.uniqueId();
  email = _.first(data.from).address;
  name = data.subject;
  description = data.text;
  attachment = _.first(data.attachments);
  file_ext = helpers.image.extensions[attachment.contentType];
  attachment = _.find(data.attachments, function(x) {
    return !_.isUndefined(helpers.image.extensions[x.contentType]);
  });
  file_path = tmp_dir + uid + '__' + attachment.generatedFileName;
  return fs.writeFile(file_path, attachment.content, function() {
    var photo, queue;
    photo = new model.photo;
    queue = invoke(function(data, callback) {
      console.log("photo from email: find user by email - " + email);
      return model.user.findOne({
        email: email
      }, function(err, user) {
        return callback(err, user);
      });
    }).then(function(user, callback) {
      photo.name = name;
      if (description && description !== '') {
        photo.description = description;
      }
      photo.ext = file_ext;
      photo.slug = 'from mail: ' + uid + ' - ' + photo.name;
      photo._user = user._id;
      return photo.save(function(err) {
        console.log("photo from email: create - " + name);
        return callback(err);
      });
    }).then(function(data, callback) {
      console.log("photo from email: create tmp file - " + file_path);
      return photo.upload_photo(file_path, function(err) {
        if (err) {
          return callback(err);
        }
        return photo.resize_photos(callback);
      });
    });
    return queue.and(function(data, callback) {
      return photo.set_slug(function(photo_slug) {
        console.log("photo from email: set slug - " + photo_slug);
        return callback(null, photo_slug);
      });
    }).rescue(function(err) {
      console.log("photo from email: error");
      if (err) {
        return console.error(err);
      }
    }).end(null, function(data) {
      return console.log("photo from email: end");
    });
  });
};
